apiVersion: template.openshift.io/v1
kind: Template
apiVersion: v1
metadata:
  name: nodejs-s2i-srvc-template
  annotations:
    openshift.io/display-name: "nodejs-s2i-srvc-template"
    description: >-
      The template for deployment Node.js service using S2I
      approach

    tags: "node.js"
    iconClass: fas fa-tools
    openshift.io/provider-display-name: "Pavlo Shcherbukha" 
    openshift.io/documentation-url: "https://github.com/pavlo-shcherbukha/ubi8-nodejs-rdbg.git" 
    openshift.io/support-url: "https://github.com/pavlo-shcherbukha/ubi8-nodejs-rdbg.git" 
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      name: "${APP_SERVICE_NAME}"
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
    spec:
      source:
        contextDir: /nodesrvcbe
        git:
          ref: tz-000001-init
          uri: https://github.com/pavlo-shcherbukha/ubi8-nodejs-rdbg.git
        sourceSecret:
          name: psh-gihtub
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: ${FROM_IS_NAME}
            namespace: openshift
        type: Source
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange
      runPolicy: Serial
      output:
        to:
          kind: ImageStreamTag
          name: "${APP_SERVICE_NAME}:latest"
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
      namespace: "${NAMESPACE}"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: "${APP_SERVICE_NAME}"
        deploymentconfig: "${APP_SERVICE_NAME}"
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "${APP_SERVICE_NAME}"
            deploymentconfig: "${APP_SERVICE_NAME}"
        spec:
          containers:
          - env:
            - name: NODE_ENV
              value: "production"
            - name: DEV_MODE
              value: "false"
            - name: NPM_RUN
              value: "start"
            - name: NPM_RUN
              value: "start"
            imagePullPolicy: Always
            name: "${APP_SERVICE_NAME}"
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_SERVICE_NAME}
          from:
            kind: ImageStreamTag
            name: "${APP_SERVICE_NAME}:latest"
            namespace: "${NAMESPACE}"
        type: ImageChange
      - type: ConfigChange
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
    spec:
      ports:
      - name: 8080-tcp
        nodePort: 0
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentconfig: "${APP_SERVICE_NAME}"
    status:
      loadBalancer: {}
parameters:
  - name: NAMESPACE
    displayName: Namespace 
    description: The Namespace where Redis must be deployed. 
    required: true   
  - name: APP_SERVICE_NAME
    displayName: APP Service Name 
    description: The name of the OpenShift Service exposed for the APP.
    required: true   
  - name: APP_NAME
    displayName: Application Name 
    description: The name of the OpenShift Application  for Groupe of Servoces.
    required: true 
  - name: FROM_IS_NAME
    displayName: Image stream from name 
    description: Points to the image stream name of the base containser image for example nodejs:14-ubi8.
    required: true 