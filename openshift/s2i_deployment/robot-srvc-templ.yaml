apiVersion: template.openshift.io/v1
kind: Template
apiVersion: v1
metadata:
  name: nodejs-s2i-deployment-template
  annotations:
    openshift.io/display-name: "nodejs-s2i-deployment-template"
    description: >-
      The template for deployment Node.js service using S2I
      approach

    tags: "node.js"
    iconClass: fas fa-tools
    openshift.io/provider-display-name: "Pavlo Shcherbukha" 
    openshift.io/documentation-url: "http://int-ifc-mb10-as.pravex.ua/Node.JS_PROJECTS/pvx-aswp-deployment" 
    openshift.io/support-url: "http://int-ifc-mb10-as.pravex.ua/Node.JS_PROJECTS/pvx-aswp-deployment" 
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      name: "${APP_SERVICE_NAME}"
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
    spec:
      source:
        contextDir: /robot-ACC-OPEN
        git:
          ref: z_merged_int
          uri: http://int-ifc-mb10-as.pravex.ua/Node.JS_PROJECTS/pvx-aswp-be.git
        sourceSecret:
          name: sinc-gitlab-pvx-1
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: nodejs:12
            namespace: openshift
        type: Source
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange
      runPolicy: Serial
      output:
        to:
          kind: ImageStreamTag
          name: "${APP_SERVICE_NAME}:latest"
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
      namespace: "${NAMESPACE}"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: "${APP_SERVICE_NAME}"
        deploymentconfig: "${APP_SERVICE_NAME}"
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "${APP_SERVICE_NAME}"
            deploymentconfig: "${APP_SERVICE_NAME}"
        spec:
          containers:
          - env:
            - name: APP_CL
              value: "apps.okd4-cl-02.openshift.pravex.ua"
            - name: APP_PRJ
              value: "pvx-aswp-dev"
            - name: TST_ISLOG
              value: "YES"
            - name: APP_ROBOT_TYPE
              value: "${APP_ROBOT_TYPE}"
            - name: "APP_TIMER"
              value: "${APP_TIME}"
            - name: APP_ROBOT_WEBHOOK_URL
              value: "http://aswp-srvc-ui-${NAMESPACE}.${APP_DNS}/v1/processor"
            - name: APP_ROBOT_CB_URL
              value: "http://${APIGW_SUFFIX}-${NAMESPACE}.${APP_DNS}/notifications"

            imagePullPolicy: Always
            name: "${APP_SERVICE_NAME}"
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_SERVICE_NAME}
          from:
            kind: ImageStreamTag
            name: "${APP_SERVICE_NAME}:latest"
            namespace: "${NAMESPACE}"
        type: ImageChange
      - type: ConfigChange
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
      name: "${APP_SERVICE_NAME}"
    spec:
      ports:
      - name: 8080-tcp
        nodePort: 0
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentconfig: "${APP_SERVICE_NAME}"
    status:
      loadBalancer: {}
parameters:
  - name: NAMESPACE
    displayName: Namespace 
    description: The Namespace where Redis must be deployed. 
    required: true   
  - name: APP_SERVICE_NAME
    displayName: APP Service Name 
    description: The name of the OpenShift Service exposed for the APP.
    value: "robot-srvc"
  - name: APP_NAME
    displayName: Application Name 
    description: The name of the OpenShift Application  for Groupe of Servoces.
    value: "pvx-aswp"
    required: true 
  - name: APP_ROBOT_TYPE
    displayName: APP ROBOT TYPE
    description: The name of the ROBOT TYPE. Define type of the worker. One of ACC-CLOSE, ACC-OPEN, MAKE-DECISION, ASWP-FIND, ASWP-SEND 
    required: true   
  - name: APP_DNS
    displayName: APP DNS
    description: The APP_DNS env var
    required: true   
  - name: APIGW_SUFFIX
    displayName: APIGW_SUFFIX
    description: Part of URL for callback
    required: true   
  - name: APP_TIME
    displayName: APP_TIME
    description: ROBOT TIME
    required: true   


